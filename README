Introduction
-------------------------------------------------------------------------------

  The purpose of this project is to gain more experience with operating system
  and kernel design and implementation. I am also interested in learning more
  about the peripheral devices that connect to a computer and how drivers
  control and interface with said devices.

  The kernel is monolithic by design. It will only run on the x86 architecture
  at the moment, but I am trying to be careful in keeping kernel code and
  machine-dependent code separate.

Features (LAST UPDATED: 12/26/2013)
-------------------------------------------------------------------------------

  kernel: arch/, boot/, kernel/, lib/
    - multiboot compatibility
    - exception handling
    - IRQ handling
    - timer (configured to 100 HZ)
    - stub keyboard driver

  memory: arch/, mm/
    - physical memory management (frame allocator)
    - virtual memory (paging, not to disk yet)
    - kernel dynamic memory (kmalloc)
 
  devices: dev/
    - VGA (console) driver
    - PCI device scanning/discovery
    - PIIX/PIIX3 IDE driver
    - ATA
      - IDENTIFY DEVICE

  userspace: nothing yet!


Build
-------------------------------------------------------------------------------

  The kernel is built using gcc and binutils, and being compiled for the
  i536 architecture. A good tutorial for building a cross compiler that
  will build this kernel is on osdev: http://wiki.osdev.org/GCC_Cross-Compiler.

  You will also need to install the GRUB utility programs and possibly xorisso.

Run
-------------------------------------------------------------------------------

I am using bochs to test and run the kernel. You can download bochs from the
bochs sourceforge page: https://sourceforge.net/projects/bochs/files/bochs/.

Make sure you compile bochs with the debugging enabled:

   ./configure \
            --enable-pci \
            --enable-vmx \
            --enable-debugger \
            --enable-disasm \
            --enable-debugger-gui \
            --enable-logging \
            --enable-cdrom \
            --enable-fpu \
            --enable-x86-debugger \
            --enable-iodebug \
            --disable-plugins \
            --disable-docbook \
            --with-x --with-x11 --with-term

To run the kernel with qemu, emulating 1GB of memory, run: 

  $ qemu-system-i386 <ISO> -m 1024
